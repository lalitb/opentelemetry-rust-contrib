pub(crate) mod bond_encoder;
pub(crate) mod central_blob;
pub(crate) mod lz4_chunked_compression;
pub mod otlp_encoder;

#[cfg(test)]
pub(crate) mod central_blob_decoder;

#[cfg(test)]
mod tests {
    use crate::payload_encoder::bond_encoder::{BondDataType, BondEncodedSchema, BondWriter};
    use crate::payload_encoder::central_blob::{
        CentralBlob, CentralEventEntry, CentralSchemaEntry,
    };

    use crate::payload_encoder::bond_encoder::FieldDef;

    fn create_payload(fields: Vec<FieldDef>, row_data: Vec<u8>) -> Vec<u8> {
        let schema_obj = BondEncodedSchema::from_fields("MdsContainer", "testNamespace", fields);
        let schema_bytes = schema_obj.as_bytes();
        let schema_md5 = md5::compute(schema_bytes).0;
        let schema_id = 1u64;

        let schema_entry = CentralSchemaEntry {
            id: schema_id,
            md5: schema_md5,
            schema: schema_obj,
        };

        let event = CentralEventEntry {
            schema_id,
            level: 5,
            event_name: std::sync::Arc::new("basename".to_string()),
            row: row_data,
        };

        let metadata =
            "namespace=testNamespace/eventVersion=Ver1v0/tenant=T/role=R/roleinstance=RI";

        let blob = CentralBlob {
            version: 1,
            format: 2,
            metadata: metadata.to_string(),
            schemas: vec![schema_entry],
            events: vec![event],
        };

        blob.to_bytes()
    }

    use std::io::{Cursor, Read};
    const TERMINATOR: u64 = 0xdeadc0dedeadc0de;

    /// Simple CentralBlob decoder for testing purposes
    #[allow(dead_code)]
    struct TestCentralBlobDecoder;

    /// A decoded schema from the CentralBlob
    #[derive(Debug, Clone, PartialEq)]
    #[allow(dead_code)]
    struct TestDecodedSchema {
        id: u64,
        md5: [u8; 16],
        schema_bytes: Vec<u8>,
    }

    /// A decoded event from the CentralBlob
    #[derive(Debug, Clone, PartialEq)]
    #[allow(dead_code)]
    struct TestDecodedEvent {
        schema_id: u64,
        level: u8,
        event_name: String,
        row_data: Vec<u8>,
    }

    /// The decoded CentralBlob payload
    #[derive(Debug, Clone, PartialEq)]
    #[allow(dead_code)]
    struct TestDecodedCentralBlob {
        version: u32,
        format: u32,
        metadata: String,
        schemas: Vec<TestDecodedSchema>,
        events: Vec<TestDecodedEvent>,
    }

    impl TestCentralBlobDecoder {
        #[allow(dead_code)]
        fn decode(data: &[u8]) -> Result<TestDecodedCentralBlob, String> {
            let mut cursor = Cursor::new(data);

            // Read header
            let version = Self::read_u32(&mut cursor)?;
            let format = Self::read_u32(&mut cursor)?;

            // Read metadata
            let metadata_len = Self::read_u32(&mut cursor)?;
            let metadata = Self::read_utf16le_string(&mut cursor, metadata_len as usize)?;

            // Read schemas and events
            let mut schemas = Vec::new();
            let mut events = Vec::new();

            while cursor.position() < data.len() as u64 {
                let entity_type = Self::read_u16(&mut cursor)?;

                match entity_type {
                    0 => {
                        // Schema entry
                        let schema = Self::decode_schema(&mut cursor)?;
                        schemas.push(schema);
                    }
                    2 => {
                        // Event entry
                        let event = Self::decode_event(&mut cursor)?;
                        events.push(event);
                    }
                    _ => return Err(format!("Invalid entity type: {}", entity_type)),
                }
            }

            Ok(TestDecodedCentralBlob {
                version,
                format,
                metadata,
                schemas,
                events,
            })
        }

        fn decode_schema(cursor: &mut Cursor<&[u8]>) -> Result<TestDecodedSchema, String> {
            let id = Self::read_u64(cursor)?;
            let mut md5 = [0u8; 16];
            cursor
                .read_exact(&mut md5)
                .map_err(|_| "Unexpected end of data".to_string())?;

            let schema_len = Self::read_u32(cursor)?;
            let mut schema_bytes = vec![0u8; schema_len as usize];
            cursor
                .read_exact(&mut schema_bytes)
                .map_err(|_| "Unexpected end of data".to_string())?;

            let terminator = Self::read_u64(cursor)?;
            if terminator != TERMINATOR {
                return Err("Invalid terminator".to_string());
            }

            Ok(TestDecodedSchema {
                id,
                md5,
                schema_bytes,
            })
        }

        fn decode_event(cursor: &mut Cursor<&[u8]>) -> Result<TestDecodedEvent, String> {
            let schema_id = Self::read_u64(cursor)?;
            let level = Self::read_u8(cursor)?;

            let event_name_len = Self::read_u16(cursor)?;
            let event_name = Self::read_utf16le_string(cursor, event_name_len as usize)?;

            let row_len = Self::read_u32(cursor)?;
            let mut row_data = vec![0u8; row_len as usize];
            cursor
                .read_exact(&mut row_data)
                .map_err(|_| "Unexpected end of data".to_string())?;

            let terminator = Self::read_u64(cursor)?;
            if terminator != TERMINATOR {
                return Err("Invalid terminator".to_string());
            }

            Ok(TestDecodedEvent {
                schema_id,
                level,
                event_name,
                row_data,
            })
        }

        fn read_u8(cursor: &mut Cursor<&[u8]>) -> Result<u8, String> {
            let mut buf = [0u8; 1];
            cursor
                .read_exact(&mut buf)
                .map_err(|_| "Unexpected end of data".to_string())?;
            Ok(buf[0])
        }

        fn read_u16(cursor: &mut Cursor<&[u8]>) -> Result<u16, String> {
            let mut buf = [0u8; 2];
            cursor
                .read_exact(&mut buf)
                .map_err(|_| "Unexpected end of data".to_string())?;
            Ok(u16::from_le_bytes(buf))
        }

        fn read_u32(cursor: &mut Cursor<&[u8]>) -> Result<u32, String> {
            let mut buf = [0u8; 4];
            cursor
                .read_exact(&mut buf)
                .map_err(|_| "Unexpected end of data".to_string())?;
            Ok(u32::from_le_bytes(buf))
        }

        fn read_u64(cursor: &mut Cursor<&[u8]>) -> Result<u64, String> {
            let mut buf = [0u8; 8];
            cursor
                .read_exact(&mut buf)
                .map_err(|_| "Unexpected end of data".to_string())?;
            Ok(u64::from_le_bytes(buf))
        }

        fn read_utf16le_string(
            cursor: &mut Cursor<&[u8]>,
            byte_len: usize,
        ) -> Result<String, String> {
            let mut buf = vec![0u8; byte_len];
            cursor
                .read_exact(&mut buf)
                .map_err(|_| "Unexpected end of data".to_string())?;

            // Convert UTF-16LE bytes to UTF-16 code units
            let mut utf16_chars = Vec::new();
            for chunk in buf.chunks_exact(2) {
                let code_unit = u16::from_le_bytes([chunk[0], chunk[1]]);
                utf16_chars.push(code_unit);
            }

            String::from_utf16(&utf16_chars).map_err(|_| "Invalid UTF-16 data".to_string())
        }
    }

    #[test]
    #[allow(clippy::approx_constant)]
    fn test_bond_encoding() {
        // The encoded value for mixed schema using official C++ Bond encoder
        let expected: &[u8] = &[
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x6e, 0x00,
            0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x3d, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x4e, 0x00,
            0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x2f, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00,
            0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00,
            0x3d, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x31, 0x00, 0x76, 0x00, 0x30, 0x00,
            0x2f, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x74, 0x00,
            0x3d, 0x00, 0x54, 0x00, 0x2f, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x65, 0x00,
            0x3d, 0x00, 0x52, 0x00, 0x2f, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x65, 0x00,
            0x69, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x3d, 0x00, 0x52, 0x00, 0x49, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xb9, 0xc0, 0xc2, 0xc6, 0xac, 0x4c, 0xb2, 0x83, 0x5f, 0x2f,
            0x10, 0xcd, 0x5d, 0xc8, 0xad, 0x71, 0xea, 0x01, 0x00, 0x00, 0x53, 0x50, 0x01, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x4d, 0x64, 0x73, 0x43, 0x6f, 0x6e,
            0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74,
            0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x64, 0x73, 0x43,
            0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
            0x00, 0x0a, 0x00, 0x00, 0x00, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x43, 0x6f,
            0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x49, 0x6e, 0x74,
            0x33, 0x32, 0x43, 0x6f, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
            0x00, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
            0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x07, 0x00, 0x00, 0x00, 0x42, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6c, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
            0x43, 0x6f, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0xc0, 0xad, 0xde,
            0xde, 0xc0, 0xad, 0xde, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x10, 0x00, 0x62, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x61,
            0x00, 0x6d, 0x00, 0x65, 0x00, 0x33, 0x00, 0x00, 0x00, 0x53, 0x50, 0x01, 0x00, 0x6f,
            0x12, 0x83, 0xc0, 0xca, 0x21, 0x09, 0x40, 0x2a, 0x00, 0x00, 0x00, 0x79, 0xdf, 0x0d,
            0x86, 0x48, 0x70, 0x00, 0x00, 0x01, 0x0b, 0x00, 0x00, 0x00, 0x48, 0x00, 0x65, 0x00,
            0x6c, 0x00, 0x6c, 0x00, 0x6f, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6f, 0x00, 0x6e, 0x00,
            0x64, 0x00, 0x21, 0x00, 0xde, 0xc0, 0xad, 0xde, 0xde, 0xc0, 0xad, 0xde,
        ];

        let fields = vec![
            FieldDef {
                name: "Float64Col".into(),
                type_id: BondDataType::BT_DOUBLE,
                field_id: 1u16,
            },
            FieldDef {
                name: "Int32Col".into(),
                type_id: BondDataType::BT_INT32,
                field_id: 2u16,
            },
            FieldDef {
                name: "Int64Col".into(),
                type_id: BondDataType::BT_INT64,
                field_id: 3u16,
            },
            FieldDef {
                name: "BoolCol".into(),
                type_id: BondDataType::BT_BOOL,
                field_id: 4u16,
            },
            FieldDef {
                name: "StringCol".into(),
                type_id: BondDataType::BT_WSTRING,
                field_id: 5u16,
            },
        ];

        let mut row_data = Vec::new();
        BondWriter::write_numeric(&mut row_data, 3.1415f64);
        BondWriter::write_numeric(&mut row_data, 42);
        BondWriter::write_numeric(&mut row_data, 123456789012345i64);
        BondWriter::write_bool(&mut row_data, true);
        BondWriter::write_wstring(&mut row_data, "Hello Bond!");

        let actual = create_payload(fields, row_data);
        assert_eq!(expected, actual);
    }
}
