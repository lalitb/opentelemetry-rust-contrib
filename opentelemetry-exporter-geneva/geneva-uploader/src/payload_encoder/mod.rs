pub(crate) mod bond_encoder;
pub(crate) mod central_blob;
pub(crate) mod lz4_chunked_compression;
pub(crate) mod otlp_encoder;

#[cfg(test)]
mod tests {
    use crate::payload_encoder::bond_encoder::{BondEncodedRow, BondEncodedSchema};
    use crate::payload_encoder::central_blob::{
        CentralBlob, CentralEventEntry, CentralSchemaEntry,
    };
    use crate::payload_encoder::lz4_chunked_compression::lz4_chunked_compression;

    fn create_payload(fields: &[(&str, u8, u16)], row_data: Vec<u8>) -> Vec<u8> {
        let schema_obj = BondEncodedSchema::from_fields(fields, "MdsContainer", "testNamespace");
        let schema_bytes = schema_obj.as_bytes();
        let schema_md5 = md5::compute(schema_bytes).0;
        let schema_id = 1u64;

        let schema_entry = CentralSchemaEntry {
            id: schema_id,
            md5: schema_md5,
            schema: schema_obj,
        };

        let row_obj = BondEncodedRow::from_schema_and_row(&schema_entry.schema, &row_data);

        let event = CentralEventEntry {
            schema_id,
            level: 5,
            event_name: "basename".to_string(),
            row: row_obj,
        };

        let metadata =
            "namespace=testNamespace/eventVersion=Ver1v0/tenant=T/role=R/roleinstance=RI";

        let blob = CentralBlob {
            version: 1,
            format: 2,
            metadata: metadata.to_string(),
            schemas: vec![schema_entry],
            events: vec![event],
        };

        blob.to_bytes()
    }

    #[test]
    fn test_single_column_double() {
        // TODO: Replace with C++ compressed bytes. Use either:
        // Option 1: Include from file
        // let expected = include_bytes!("../test_data/cpp_single_float.compressed");

        // Option 2: Paste bytes directly (for binary data with escape sequences)
        let expected: &[u8] = &[
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x6e, 0x00,
            0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x3d, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x4e, 0x00,
            0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x2f, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00,
            0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00,
            0x3d, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x31, 0x00, 0x76, 0x00, 0x30, 0x00,
            0x2f, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x74, 0x00,
            0x3d, 0x00, 0x54, 0x00, 0x2f, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x65, 0x00,
            0x3d, 0x00, 0x52, 0x00, 0x2f, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x65, 0x00,
            0x69, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x3d, 0x00, 0x52, 0x00, 0x49, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0d, 0x3a, 0xa1, 0xdc, 0xb7, 0xd9, 0x15, 0x9d, 0x5d, 0x90,
            0x87, 0xd3, 0x89, 0x20, 0x86, 0x5e, 0xc0, 0x00, 0x00, 0x00, 0x53, 0x50, 0x01, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x4d, 0x64, 0x73, 0x43, 0x6f, 0x6e,
            0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74,
            0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x64, 0x73, 0x43,
            0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x08, 0x00, 0x00, 0x00, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0xc0, 0xad, 0xde, 0xde, 0xc0, 0xad, 0xde,
            0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x00, 0x62,
            0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65,
            0x00, 0x0c, 0x00, 0x00, 0x00, 0x53, 0x50, 0x01, 0x00, 0x6f, 0x12, 0x83, 0xc0, 0xca,
            0x21, 0x09, 0x40, 0xde, 0xc0, 0xad, 0xde, 0xde, 0xc0, 0xad, 0xde,
        ];
        let fields = &[("FloatCol", 8u8, 1u16)];
        let mut row_data = Vec::new();
        row_data.extend_from_slice(&3.1415f64.to_le_bytes());

        let actual = create_payload(fields, row_data);
        assert_eq!(expected, actual);
    }

    #[test]
    fn test_single_column_int64() {
        let expected: &[u8] = &[
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x6e, 0x00,
            0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x3d, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x4e, 0x00,
            0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x2f, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00,
            0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00,
            0x3d, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x31, 0x00, 0x76, 0x00, 0x30, 0x00,
            0x2f, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x74, 0x00,
            0x3d, 0x00, 0x54, 0x00, 0x2f, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x65, 0x00,
            0x3d, 0x00, 0x52, 0x00, 0x2f, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x65, 0x00,
            0x69, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x3d, 0x00, 0x52, 0x00, 0x49, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x7c, 0x44, 0xde, 0xc6, 0x39, 0x71, 0x7d, 0x2e, 0xed, 0x1c,
            0x04, 0xd2, 0xc8, 0x5c, 0x3d, 0xef, 0xbe, 0x00, 0x00, 0x00, 0x53, 0x50, 0x01, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x4d, 0x64, 0x73, 0x43, 0x6f, 0x6e,
            0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74,
            0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x64, 0x73, 0x43,
            0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x06, 0x00, 0x00, 0x00, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xde, 0xc0, 0xad, 0xde, 0xde, 0xc0, 0xad, 0xde, 0x02, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x00, 0x62, 0x00, 0x61,
            0x00, 0x73, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x08,
            0x00, 0x00, 0x00, 0x53, 0x50, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0xde, 0xc0, 0xad,
            0xde, 0xde, 0xc0, 0xad, 0xde,
        ];
        let fields = &[("IntCol", 16u8, 1u16)];
        let mut row_data = Vec::new();
        row_data.extend_from_slice(&100i32.to_le_bytes());

        let actual = create_payload(fields, row_data);
        assert_eq!(expected, actual);
    }

    #[test]
    fn test_mixed_types_compressed() {
        let expected: &[u8] = &[
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x6e, 0x00,
            0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x3d, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x4e, 0x00,
            0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x2f, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00,
            0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00,
            0x3d, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x31, 0x00, 0x76, 0x00, 0x30, 0x00,
            0x2f, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x74, 0x00,
            0x3d, 0x00, 0x54, 0x00, 0x2f, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x65, 0x00,
            0x3d, 0x00, 0x52, 0x00, 0x2f, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x65, 0x00,
            0x69, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x3d, 0x00, 0x52, 0x00, 0x49, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc2, 0x91, 0x6b, 0x48, 0xa6, 0xc8, 0xab, 0x6a, 0x7c, 0x47,
            0xda, 0x01, 0xc7, 0x8a, 0x84, 0x5d, 0xa2, 0x01, 0x00, 0x00, 0x53, 0x50, 0x01, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x4d, 0x64, 0x73, 0x43, 0x6f, 0x6e,
            0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74,
            0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x64, 0x73, 0x43,
            0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
            0x00, 0x09, 0x00, 0x00, 0x00, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x31,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x46, 0x6c, 0x6f, 0x61,
            0x74, 0x43, 0x6f, 0x6c, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
            0x00, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x33, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
            0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
            0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0xc0, 0xad, 0xde, 0xde, 0xc0,
            0xad, 0xde, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10,
            0x00, 0x62, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6d,
            0x00, 0x65, 0x00, 0x36, 0x00, 0x00, 0x00, 0x53, 0x50, 0x01, 0x00, 0x6f, 0x12, 0x83,
            0xc0, 0xca, 0x21, 0x09, 0x40, 0xc9, 0xe5, 0x3f, 0xa4, 0xdf, 0xbe, 0x05, 0x40, 0x17,
            0xd9, 0xce, 0xf7, 0x53, 0xe3, 0xf9, 0x3f, 0x0b, 0x00, 0x00, 0x00, 0x48, 0x00, 0x65,
            0x00, 0x6c, 0x00, 0x6c, 0x00, 0x6f, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6f, 0x00, 0x6e,
            0x00, 0x64, 0x00, 0x21, 0x00, 0xde, 0xc0, 0xad, 0xde, 0xde, 0xc0, 0xad, 0xde,
        ];
        let fields = &[
            ("FloatCol1", 8u8, 1u16),
            ("FloatCol2", 8u8, 2u16),
            ("FloatCol3", 8u8, 3u16),
            ("StringCol", 18u8, 4u16), // BT_WSTRING
        ];

        let mut row_data = Vec::new();
        row_data.extend_from_slice(&3.1415f64.to_le_bytes());
        row_data.extend_from_slice(&2.7182f64.to_le_bytes());
        row_data.extend_from_slice(&1.6180f64.to_le_bytes());

        let hello_str = "Hello Bond!";
        let utf16_bytes: Vec<u8> = hello_str
            .encode_utf16()
            .flat_map(|c| c.to_le_bytes())
            .collect();
        row_data.extend_from_slice(&(hello_str.len() as u32).to_le_bytes());
        row_data.extend_from_slice(&utf16_bytes);

        let actual = create_payload(fields, row_data);
        assert_eq!(expected, actual);
    }
}
